---
import DashLayout from "../layouts/DashLayout.astro";
import { isLoggedIn } from "../utils/isLoggedIn";
import Password from "../components/Password.astro";

const cookie = Astro.request.headers.get("cookie");

if (!isLoggedIn(cookie)) {
  return Astro.redirect("/login");
}
---

<DashLayout title="Dashboard">
  <main>
    <section class="w-full h-screen grid grid-cols-dashboard">
      <!-- Sidebar -->
      <div class="w-full h-full border-r border-r-white/15">
        <div>
          <h2
            class="text-xl text-white tracking-tight border-b border-b-white/15 w-full px-5 py-3"
          >
            Dashboard
          </h2>
        </div>
        <div>
          <h2 class="text-sm text-white/60 tracking-normal px-5 py-3">
            Settings
          </h2>
          <button
            id="change-password-button"
            class="text-sm text-white/85 tracking-normal px-5 hover:text-white transition-colors"
          >
            Change master password
          </button>
        </div>
      </div>

      <!-- Main Content -->
      <div class="w-full">
        <div class="w-full flex justify-between items-center">
          <h2
            class="text-sm text-white/60 tracking-tight font-medium px-10 py-4 border-b border-b-white/15 w-full"
          >
            Passwords
          </h2>
        </div>
        <div class="px-10 py-5">
          <div class="flex gap-2">
            <!-- Load Passwords Button -->
            <button
              id="open-dialog-btn"
              class="text-white/85 bg-green outline-none px-4 rounded-[0.3rem] border border-primary tracking-wide py-0.5 text-sm login hover:bg-green-light transition-colors"
            >
              Load Passwords
            </button>
            <button
              id="new-password-btn"
              class="text-white/85 bg-[#242424] px-4 rounded-[0.3rem] outline-none border border-white/20 tracking-wide py-0.5 text-sm login hover:bg-[#313131] transition-colors"
            >
              New Passwords
            </button>
          </div>
          <div class="flex items-center gap-2 mt-2">
            <select
              id="search-field"
              class="bg-[#1c1c1c] border border-white/20 text-white/85 h-full text-sm rounded-md py-2 px-3 outline-none"
            >
              <option value="site_name">Site Name</option>
              <option value="username">Username</option>
              <option value="url">URL</option>
              <option value="notes">Notes</option>
              <option value="tags">Tags</option>
              <option value="extra_fields">Extra Fields</option>
            </select>

            <div
              class="border border-white/20 bg-[#1c1c1c] h-full flex rounded-md"
            >
              <div
                class="bg-white/20 rounded-l-md min-w-10 flex items-center justify-center"
              >
                <img src="search.svg" alt="search icon" width="20" />
              </div>
              <input
                type="search"
                id="search-input"
                placeholder="Search..."
                class="bg-[#1c1c1c] max-w-48 rounded-md text-white/85 text-sm py-2 px-3 outline-none"
              />
            </div>
          </div>
          <div class="flex gap-2 mt-4">
            <button
              id="create-new-file-btn"
              class="text-white/85 bg-[#242424] px-4 rounded-[0.3rem] outline-none border border-white/20 tracking-wide py-0.5 text-sm login hover:bg-[#313131] transition-colors"
            >
              Create New File
            </button>
            <button
              id="import-plain-btn"
              class="text-white/85 bg-[#242424] px-4 rounded-[0.3rem] outline-none border border-white/20 tracking-wide py-0.5 text-sm login hover:bg-[#313131] transition-colors"
            >
              Import plain
            </button>
            <button
              id="export-plain-btn"
              class="text-white/85 bg-[#242424] px-4 rounded-[0.3rem] outline-none border border-white/20 tracking-wide py-0.5 text-sm login hover:bg-[#313131] transition-colors"
            >
              Export plain
            </button>
            <button
              id="decrypt-file-btn"
              class="text-white/85 bg-[#242424] px-4 rounded-[0.3rem] outline-none border border-white/20 tracking-wide py-0.5 text-sm login hover:bg-[#313131] transition-colors"
            >
              Decrypt File
            </button>
            <button
              id="decrypt-selected-btn"
              class="text-white/85 bg-[#242424] px-4 rounded-[0.3rem] outline-none border border-white/20 tracking-wide py-0.5 text-sm login hover:bg-[#313131] transition-colors"
            >
              Decrypt Selected
            </button>
          </div>
        </div>

        <!-- Passwords Container -->
        <div
          id="passwords-container"
          class="w-full flex px-10 gap-2 flex-col mt-5"
        >
        </div>
      </div>
    </section>

    <!-- Dialog for Changing Master Password -->
    <dialog
      id="change-password-dialog"
      class="absolute top-[50%] py-4 px-4 left-[50%] backdrop:bg-background/80 backdrop:filter backdrop:backdrop-blur-sm justify-enter items-center translate-y-[-50%] translate-x-[-50%] bg-background-light border border-white/20 w-[35rem] rounded-md"
    >
      <form id="change-password-form" class="flex flex-col w-full">
        <div class="flex flex-col gap-2">
          <label
            for="change-master-pass"
            class="text-white/60 mb-2 text-sm tracking-tight"
          >
            Enter your old password
          </label>
          <input
            type="password"
            id="change-master-pass"
            name="change-master-pass"
            required
            class="border border-white/20 bg-[#1c1c1c] rounded-md text-white/85 text-sm py-2 px-3 outline-none"
          />

          <label
            for="change-new-master-pass"
            class="text-white/60 mb-2 text-sm tracking-tight"
          >
            Enter your new password
          </label>
          <input
            type="password"
            id="change-new-master-pass"
            name="change-new-master-pass"
            required
            class="border border-white/20 bg-[#1c1c1c] rounded-md text-white/85 text-sm py-2 px-3 outline-none"
          />

          <span id="selected-change-file-name" class="text-white/60 text-sm"
          ></span>
        </div>
        <div class="flex gap-2">
          <button
            type="submit"
            class="text-white/85 bg-green rounded-[0.3rem] border border-primary tracking-wide py-1 px-5 mt-4 text-sm hover:bg-green-light transition-colors"
          >
            Save Changes
          </button>
          <button
            type="button"
            id="cancel-change-password-dialog-btn"
            class="text-white/85 bg-red-500 rounded-[0.3rem] border border-red-400 tracking-wide py-1 px-5 mt-4 text-sm hover:bg-red-400 transition-colors"
          >
            Cancel
          </button>
        </div>
      </form>
    </dialog>

    <!-- Dialog for Loading Password File -->
    <dialog
      id="password-dialog"
      class="absolute top-[50%] py-4 px-4 left-[50%] backdrop:bg-background/80 backdrop:filter backdrop:backdrop-blur-sm justify-enter items-center translate-y-[-50%] translate-x-[-50%] bg-background-light border border-white/20 w-[35rem] rounded-md"
    >
      <form id="password-form" class="flex flex-col w-full">
        <div class="flex flex-col gap-2">
          <label
            for="master-pass"
            class="text-white/60 mb-2 text-sm tracking-tight"
          >
            Enter your password
          </label>
          <input
            type="password"
            id="master-pass"
            name="master-pass"
            required
            class="border border-white/20 bg-[#1c1c1c] rounded-md text-white/85 text-sm py-2 px-3 outline-none"
          />

          <label class="text-sm text-white/60 font-medium leading-none mb-2"
            >Passwords File</label
          >
          <button
            type="button"
            id="select-password-file"
            class="cursor-pointer h-10 w-full rounded-md border border-white/15 border-dashed bg-[#1c1c1c] outline-none px-3 py-2 text-sm text-white/60"
          >
            Choose File
          </button>
          <span id="selected-file-name" class="text-white/60 text-sm"></span>
        </div>

        <div class="flex gap-2">
          <button
            type="submit"
            class="text-white/85 bg-green rounded-[0.3rem] border border-primary tracking-wide py-1 px-5 mt-4 text-sm hover:bg-green-light transition-colors"
          >
            Load
          </button>
          <button
            type="button"
            id="cancel-password-dialog-btn"
            class="text-white/85 bg-red-500 rounded-[0.3rem] border border-red-400 tracking-wide py-1 px-5 mt-4 text-sm hover:bg-red-400 transition-colors"
          >
            Cancel
          </button>
        </div>
      </form>
    </dialog>

    <!-- Dialog for decrypting -->
    <dialog
      id="decrypt-dialog"
      class="absolute top-[50%] py-4 px-4 left-[50%] backdrop:bg-background/80 backdrop:filter backdrop:backdrop-blur-sm justify-enter items-center translate-y-[-50%] translate-x-[-50%] bg-background-light border border-white/20 w-[35rem] rounded-md"
    >
      <form id="decrypt-form" class="flex flex-col w-full">
        <label
          for="descrypt-password"
          class="text-white/60 mb-1 text-sm tracking-tight"
        >
          Enter master password
        </label>
        <input
          type="password"
          id="descrypt-password"
          name="descrypt-password"
          required
          class="border border-white/20 bg-[#1c1c1c] w-full rounded-md text-white/85 text-sm py-2 px-3 outline-none"
        />
        <div class="flex gap-2">
          <button
            type="submit"
            class="text-white/85 bg-green rounded-[0.3rem] border border-primary tracking-wide py-1 px-5 mt-4 text-sm hover:bg-green-light transition-colors"
            >Load</button
          >
          <button
            type="button"
            id="decrypt-cancel-dialog-btn"
            class="text-white/85 bg-red-500 rounded-[0.3rem] border border-red-400 tracking-wide py-1 px-5 mt-4 text-sm hover:bg-red-400 transition-colors"
            >Cancel</button
          >
        </div>
      </form>
    </dialog>

    <!-- Dialog for Importing Plain Password File -->
    <dialog
      id="import-plain-dialog"
      class="absolute top-[50%] py-4 px-4 left-[50%] backdrop:bg-background/80 backdrop:filter backdrop:backdrop-blur-sm justify-enter items-center translate-y-[-50%] translate-x-[-50%] bg-background-light border border-white/20 w-[35rem] rounded-md"
    >
      <form id="import-plain-form" class="flex flex-col w-full">
        <label
          for="plain-import-master-pass"
          class="text-white/60 mb-1 text-sm tracking-tight"
        >
          Enter master password
        </label>
        <input
          type="password"
          id="plain-import-master-pass"
          name="plain-import-master-pass"
          required
          class="border border-white/20 bg-[#1c1c1c] w-full rounded-md text-white/85 text-sm py-2 px-3 outline-none"
        />

        <div class="flex flex-col gap-2 mt-5">
          <label class="text-sm text-white/60 font-medium leading-none mb-1"
            >Passwords File</label
          >
          <button
            type="button"
            id="select-import-plain-file"
            class="cursor-pointer h-10 w-full rounded-md border border-white/15 border-dashed bg-[#1c1c1c] outline-none px-3 py-2 text-sm text-white/60"
            >Choose File</button
          >
          <span
            id="selected-import-plain-file-name"
            class="text-white/60 text-sm"></span>
        </div>
        <div class="flex gap-2">
          <button
            type="submit"
            class="text-white/85 bg-green rounded-[0.3rem] border border-primary tracking-wide py-1 px-5 mt-4 text-sm hover:bg-green-light transition-colors"
            >Load</button
          >
          <button
            type="button"
            id="cancel-import-plain-dialog-btn"
            class="text-white/85 bg-red-500 rounded-[0.3rem] border border-red-400 tracking-wide py-1 px-5 mt-4 text-sm hover:bg-red-400 transition-colors"
            >Cancel</button
          >
        </div>
      </form>
    </dialog>

    <!-- Dialog for Adding New Password -->
    <dialog
      id="new-password-dialog"
      class="absolute top-[50%] py-4 px-4 left-[50%] backdrop:bg-background/80 backdrop:filter backdrop:backdrop-blur-sm justify-enter items-center translate-y-[-50%] translate-x-[-50%] bg-background-light border border-white/20 w-[35rem] rounded-md"
    >
      <form id="new-password-form" class="flex flex-col w-full">
        <div class="flex flex-col gap-2">
          <div class="flex gap-4">
            <div>
              <label
                for="site-name"
                class="text-white/60 mb-1 text-sm tracking-tight"
              >
                Enter site name
              </label>
              <input
                type="text"
                id="site-name"
                name="site-name"
                required
                class="border border-white/20 bg-[#1c1c1c] w-full rounded-md text-white/85 text-sm py-2 px-3 outline-none"
              />
            </div>
            <div>
              <label
                for="username"
                class="text-white/60 mb-1 text-sm tracking-tight"
              >
                Enter username
              </label>
              <input
                type="text"
                id="username"
                name="username"
                required
                class="border border-white/20 bg-[#1c1c1c] w-full rounded-md text-white/85 text-sm py-2 px-3 outline-none"
              />
            </div>
          </div>

          <div class="flex gap-4">
            <div>
              <label
                for="site-password"
                class="text-white/60 mb-1 text-sm tracking-tight"
              >
                Enter password
              </label>
              <input
                type="password"
                id="site-password"
                name="site-password"
                required
                class="border border-white/20 w-full bg-[#1c1c1c] rounded-md text-white/85 text-sm py-2 px-3 outline-none"
              />
            </div>
            <div>
              <label
                for="url"
                class="text-white/60 mb-1 text-sm tracking-tight"
              >
                Enter site url
              </label>
              <input
                type="url"
                id="url"
                name="url"
                required
                class="border border-white/20 bg-[#1c1c1c] w-full rounded-md text-white/85 text-sm py-2 px-3 outline-none"
              />
            </div>
          </div>

          <label for="notes" class="text-white/60 mb-1 text-sm tracking-tight">
            Enter notes
          </label>
          <textarea
            id="notes"
            name="notes"
            required
            class="border w-full resize-none border-white/20 bg-[#1c1c1c] rounded-md text-white/85 text-sm py-2 px-3 outline-none"
          ></textarea>

          <div class="flex gap-4 w-full">
            <div class="flex flex-col w-full">
              <label
                for="tags"
                class="text-white/60 text-sm mb-1 tracking-tight"
              >
                Tags (separated by comma).
              </label>
              <input
                type="text"
                id="tags"
                name="tags"
                required
                class="border w-full border-white/20 bg-[#1c1c1c] rounded-md text-white/85 text-sm py-2 px-3 outline-none"
              />
              <span class="text-white/30 mb-1 text-sm tracking-tight">
                e.g. work, favsite, mail
              </span>
            </div>
            <div class="flex flex-col w-full">
              <label
                for="extra-fields"
                class="text-white/60 text-sm mb-1 tracking-tight"
              >
                Extra-fields (separated by comma).
              </label>
              <input
                type="text"
                id="extra-fields"
                name="extra-fields"
                required
                class="border w-full border-white/20 bg-[#1c1c1c] rounded-md text-white/85 text-sm py-2 px-3 outline-none"
              />
              <span class="text-white/30 mb-1 text-sm tracking-tight">
                e.g. field1, field2, field3
              </span>
            </div>
          </div>
          <label
            for="new-master-pass"
            class="text-white/60 mb-1 text-sm tracking-tight"
          >
            Enter master password
          </label>
          <input
            type="password"
            id="new-master-pass"
            name="new-master-pass"
            required
            class="border border-white/20 bg-[#1c1c1c] w-full rounded-md text-white/85 text-sm py-2 px-3 outline-none"
          />
          <div class="flex gap-5">
            <div class="w-full">
              <label
                class="text-sm text-white/60 font-medium leading-none mb-2 mt-2"
                for="edit-icon-file"
              >
                Icon file
              </label>
              <input
                id="edit-icon-file"
                name="edit-icon-file"
                type="file"
                required
                class="cursor-pointer h-10 w-full rounded-md border border-white/15 border-dashed bg-[#1c1c1c] outline-none px-3 py-2 text-sm text-white/60 file:border-0 file:bg-transparent file:text-white file:text-sm file:font-medium"
              />
            </div>
          </div>
        </div>
        <div class="flex gap-2">
          <button
            type="submit"
            class="text-white/85 bg-green rounded-[0.3rem] border border-primary tracking-wide py-1 px-5 mt-4 text-sm hover:bg-green-light transition-colors"
          >
            Load
          </button>
          <button
            type="button"
            id="cancel-new-password-dialog-btn"
            class="text-white/85 bg-red-500 rounded-[0.3rem] border border-red-400 tracking-wide py-1 px-5 mt-4 text-sm hover:bg-red-400 transition-colors"
          >
            Cancel
          </button>
        </div>
      </form>
    </dialog>

    <!-- Dialog for Creating New File -->
    <dialog
      id="create-new-file-dialog"
      class="absolute top-[50%] py-4 px-4 left-[50%] backdrop:bg-background/80 backdrop:filter backdrop:backdrop-blur-sm justify-enter items-center translate-y-[-50%] translate-x-[-50%] bg-background-light border border-white/20 w-[35rem] rounded-md"
    >
      <form id="create-new-file-form" class="flex flex-col w-full">
        <!-- Campos para nueva contraseña -->
        <div class="flex flex-col gap-2">
          <!-- Site Name and Username -->
          <div class="flex gap-4">
            <div>
              <label
                for="new-site-name"
                class="text-white/60 mb-1 text-sm tracking-tight"
                >Enter site name</label
              >
              <input
                type="text"
                id="new-site-name"
                name="site_name"
                required
                class="border border-white/20 bg-[#1c1c1c] w-full rounded-md text-white/85 text-sm py-2 px-3 outline-none"
              />
            </div>
            <div>
              <label
                for="new-username"
                class="text-white/60 mb-1 text-sm tracking-tight"
                >Enter username</label
              >
              <input
                type="text"
                id="new-username"
                name="username"
                required
                class="border border-white/20 bg-[#1c1c1c] w-full rounded-md text-white/85 text-sm py-2 px-3 outline-none"
              />
            </div>
          </div>
          <!-- Password and URL -->
          <div class="flex gap-4">
            <div>
              <label
                for="new-site-password"
                class="text-white/60 mb-1 text-sm tracking-tight"
                >Enter password</label
              >
              <input
                type="password"
                id="new-site-password"
                name="site_password"
                required
                class="border border-white/20 bg-[#1c1c1c] w-full rounded-md text-white/85 text-sm py-2 px-3 outline-none"
              />
            </div>
            <div>
              <label
                for="new-url"
                class="text-white/60 mb-1 text-sm tracking-tight"
                >Enter site url</label
              >
              <input
                type="url"
                id="new-url"
                name="url"
                required
                class="border border-white/20 bg-[#1c1c1c] w-full rounded-md text-white/85 text-sm py-2 px-3 outline-none"
              />
            </div>
          </div>
          <!-- Notes -->
          <label
            for="new-notes"
            class="text-white/60 mb-1 text-sm tracking-tight">Enter notes</label
          >
          <textarea
            id="new-notes"
            name="notes"
            required
            class="border w-full resize-none border-white/20 bg-[#1c1c1c] rounded-md text-white/85 text-sm py-2 px-3 outline-none"
          ></textarea>
          <!-- Tags and Extra Fields -->
          <div class="flex gap-4 w-full">
            <div class="flex flex-col w-full">
              <label
                for="new-tags"
                class="text-white/60 text-sm mb-1 tracking-tight"
                >Tags (separated by comma)</label
              >
              <input
                type="text"
                id="new-tags"
                name="tags"
                required
                class="border w-full border-white/20 bg-[#1c1c1c] rounded-md text-white/85 text-sm py-2 px-3 outline-none"
              />
            </div>
            <div class="flex flex-col w-full">
              <label
                for="new-extra-fields"
                class="text-white/60 text-sm mb-1 tracking-tight"
                >Extra-fields (separated by comma)</label
              >
              <input
                type="text"
                id="new-extra-fields"
                name="extra_fields"
                required
                class="border w-full border-white/20 bg-[#1c1c1c] rounded-md text-white/85 text-sm py-2 px-3 outline-none"
              />
            </div>
          </div>
          <!-- Master Password -->
          <label
            for="create-master-pass"
            class="text-white/60 mb-1 text-sm tracking-tight"
            >Enter master password</label
          >
          <input
            type="password"
            id="create-master-pass"
            name="master_password"
            required
            class="border border-white/20 bg-[#1c1c1c] w-full rounded-md text-white/85 text-sm py-2 px-3 outline-none"
          />
        </div>
        <!-- Botones -->
        <div class="flex gap-2">
          <button
            type="submit"
            class="text-white/85 bg-green rounded-[0.3rem] border border-primary tracking-wide py-1 px-5 mt-4 text-sm hover:bg-green-light transition-colors"
            >Create File</button
          >
          <button
            type="button"
            id="cancel-create-new-file-dialog-btn"
            class="text-white/85 bg-red-500 rounded-[0.3rem] border border-red-400 tracking-wide py-1 px-5 mt-4 text-sm hover:bg-red-400 transition-colors"
            >Cancel</button
          >
        </div>
      </form>
    </dialog>

    <!-- Dialog for Editing an existing Password -->
    <dialog
      id="edit-password-dialog"
      class="absolute top-[50%] py-4 px-4 left-[50%] backdrop:bg-background/80 backdrop:filter backdrop:backdrop-blur-sm justify-center items-center translate-y-[-50%] translate-x-[-50%] bg-background-light border border-white/20 w-[35rem] rounded-md"
    >
      <form id="edit-password-form" class="flex flex-col w-full">
        <div class="flex flex-col gap-2">
          <!-- Hidden field to store the ID of the password entry -->
          <input type="hidden" id="edit-entry-id" name="entry_id" />

          <div class="flex gap-4">
            <div>
              <label
                for="edit-site-name"
                class="text-white/60 mb-1 text-sm tracking-tight"
              >
                Site name
              </label>
              <input
                type="text"
                id="edit-site-name"
                name="site_name"
                required
                class="border border-white/20 bg-[#1c1c1c] w-full rounded-md text-white/85 text-sm py-2 px-3 outline-none"
              />
            </div>
            <div>
              <label
                for="edit-username"
                class="text-white/60 mb-1 text-sm tracking-tight"
              >
                Username
              </label>
              <input
                type="text"
                id="edit-username"
                name="username"
                required
                class="border border-white/20 bg-[#1c1c1c] w-full rounded-md text-white/85 text-sm py-2 px-3 outline-none"
              />
            </div>
          </div>

          <div class="flex gap-4">
            <div>
              <label
                for="edit-site-password"
                class="text-white/60 mb-1 text-sm tracking-tight"
              >
                Password
              </label>
              <input
                type="password"
                id="edit-site-password"
                name="site_password"
                class="border border-white/20 w-full bg-[#1c1c1c] rounded-md text-white/85 text-sm py-2 px-3 outline-none"
                placeholder="Leave blank to keep current password"
              />
            </div>
            <div>
              <label
                for="edit-url"
                class="text-white/60 mb-1 text-sm tracking-tight"
              >
                Site URL
              </label>
              <input
                type="url"
                id="edit-url"
                name="url"
                required
                class="border border-white/20 bg-[#1c1c1c] w-full rounded-md text-white/85 text-sm py-2 px-3 outline-none"
              />
            </div>
          </div>

          <label
            for="edit-notes"
            class="text-white/60 mb-1 text-sm tracking-tight"
          >
            Notes
          </label>
          <textarea
            id="edit-notes"
            name="notes"
            required
            class="border w-full resize-none border-white/20 bg-[#1c1c1c] rounded-md text-white/85 text-sm py-2 px-3 outline-none"
          ></textarea>

          <!-- Campo para Fecha de Expiración -->
          <label
            for="edit-expiration-date"
            class="text-white/60 mb-1 text-sm tracking-tight"
          >
            Expiration Date
          </label>
          <input
            type="date"
            id="edit-expiration-date"
            name="expiration_date"
            required
            class="border border-white/20 bg-[#1c1c1c] w-full rounded-md text-white/85 text-sm py-2 px-3 outline-none"
          />

          <div class="flex gap-4 w-full">
            <div class="flex flex-col w-full">
              <label
                for="edit-tags"
                class="text-white/60 text-sm mb-1 tracking-tight"
              >
                Tags (separated by commas)
              </label>
              <input
                type="text"
                id="edit-tags"
                name="tags"
                required
                class="border w-full border-white/20 bg-[#1c1c1c] rounded-md text-white/85 text-sm py-2 px-3 outline-none"
              />
              <span class="text-white/30 mb-1 text-sm tracking-tight">
                e.g. work, favsite, mail
              </span>
            </div>
            <div class="flex flex-col w-full">
              <label
                for="edit-extra-fields"
                class="text-white/60 text-sm mb-1 tracking-tight"
              >
                Extra fields (separated by commas)
              </label>
              <input
                type="text"
                id="edit-extra-fields"
                name="extra_fields"
                required
                class="border w-full border-white/20 bg-[#1c1c1c] rounded-md text-white/85 text-sm py-2 px-3 outline-none"
              />
              <span class="text-white/30 mb-1 text-sm tracking-tight">
                e.g. field1, field2, field3
              </span>
            </div>
          </div>
          <label
            for="edit-master-pass"
            class="text-white/60 mb-1 text-sm tracking-tight"
          >
            Master password
          </label>
          <input
            type="password"
            id="edit-master-pass"
            name="master_password"
            required
            class="border border-white/20 bg-[#1c1c1c] w-full rounded-md text-white/85 text-sm py-2 px-3 outline-none"
          />
          <div class="flex flex-col gap-2">
            <div class="w-full">
              <label
                class="text-sm text-white/60 font-medium leading-none mb-2 mt-2"
                for="edit-existing-icon-file"
              >
                Icon file
              </label>
              <input
                id="edit-existing-icon-file"
                name="edit-existing-icon-file"
                type="file"
                class="cursor-pointer h-10 w-full rounded-md border border-white/15 border-dashed bg-[#1c1c1c] outline-none px-3 py-2 text-sm text-white/60 file:border-0 file:bg-transparent file:text-white file:text-sm file:font-medium"
              />
            </div>
          </div>
        </div>
        <div class="flex gap-2">
          <button
            type="submit"
            class="text-white/85 bg-green rounded-[0.3rem] border border-primary tracking-wide py-1 px-5 mt-4 text-sm hover:bg-green-light transition-colors"
          >
            Save
          </button>
          <button
            type="button"
            id="cancel-edit-password-dialog-btn"
            class="text-white/85 bg-red-500 rounded-[0.3rem] border border-red-400 tracking-wide py-1 px-5 mt-4 text-sm hover:bg-red-400 transition-colors"
          >
            Cancel
          </button>
        </div>
      </form>
    </dialog>
  </main>
</DashLayout>

<script>
  // Global variables
  let fileHandle;
  let passwords = [];
  let passwordFileData = null;
  let passwordFileName = "";

  // Function to format DES key to 8 bytes
  function formatDESKey(password) {
    return Buffer.byteLength(password, "utf8") === 8
      ? Buffer.from(password, "utf8")
      : Buffer.from(password.padEnd(8, " "), "utf8");
  }

  // Function to overwrite the selected file with new data
  async function overwriteFile(data) {
    if (!fileHandle) {
      alert("No file selected.");
      return;
    }
    try {
      const writableStream = await fileHandle.createWritable();
      await writableStream.write(data);
      await writableStream.close();
      console.log("File overwritten successfully!");
    } catch (error) {
      console.error("Error overwriting file:", error);
      alert("Failed to overwrite the file.");
    }
  }

  // Function to render passwords
  function renderPasswords(entries) {
    const container = document.getElementById("passwords-container");
    container.innerHTML = "";
    entries.forEach((entry) => {
      const passwordComponent = createPasswordComponent(entry);
      container.appendChild(passwordComponent);
    });
  }

  // Function to create a password component
  function createPasswordComponent(entry) {
    const container = document.createElement("div");
    container.classList.add(
      "w-full",
      "rounded-md",
      "bg-background-light",
      "border",
      "border-white/40",
      "px-2",
      "py-2"
    );

    const header = document.createElement("div");
    header.classList.add(
      "w-full",
      "flex",
      "justify-between",
      "items-center",
      "gap-2"
    );

    // Site details
    const detailsContainer = document.createElement("div");
    detailsContainer.classList.add("flex", "flex-col", "ml-2");

    const siteName = document.createElement("span");
    siteName.classList.add("text-white", "font-normal", "text-sm");
    siteName.textContent = entry.site_name;

    const username = document.createElement("span");
    username.classList.add("text-white/50", "font-normal", "text-sm");
    username.textContent = entry.username;

    const notes = document.createElement("p");
    notes.classList.add(
      "text-white/85",
      "font-normal",
      "max-w-3xl",
      "text-pretty",
      "mt-1",
      "text-sm"
    );

    notes.textContent = entry.notes;

    detailsContainer.appendChild(siteName);
    detailsContainer.appendChild(username);
    detailsContainer.appendChild(notes);

    // Action buttons
    const actionContainer = document.createElement("div");
    actionContainer.classList.add("flex", "gap-2");

    // Link button with site icon
    const linkBtn = document.createElement("a");
    linkBtn.href = entry.url;
    linkBtn.target = "_blank";

    const checkbox = document.createElement("input");
    checkbox.type = "checkbox";
    checkbox.classList.add("entry-checkbox");
    checkbox.value = entry.id; // Store the entry's ID for identification
    checkbox.dataset.entryId = entry.id;

    const linkIcon = document.createElement("img");
    linkIcon.alt = "Site icon";
    linkIcon.width = 30;
    linkIcon.classList.add("w-[30px]", "h-full", "object-contain");

    if (entry.icon) {
      try {
        const decodedIcon = atob(entry.icon.trim());
        if (decodedIcon.startsWith("<svg")) {
          const mimeType = "image/svg+xml";
          linkIcon.src = `data:${mimeType};base64,${entry.icon}`;
        } else {
          // If not SVG, use default icon
          linkIcon.src = "web.svg";
        }
      } catch (error) {
        console.error("Error decoding icon:", error);
        // Fallback to default icon on error
        linkIcon.src = "web.svg";
      }
    } else {
      // Use default icon if no icon is provided
      linkIcon.src = "web.svg";
    }

    // Icon fallback in case SVG fails to load
    linkIcon.onerror = () => {
      linkIcon.src = "web.svg";
    };

    linkBtn.appendChild(linkIcon);

    // Copy password button
    const copyBtn = document.createElement("button");
    copyBtn.innerHTML =
      '<img width="25" src="key.svg" alt="copy password icon" />';
    copyBtn.addEventListener("click", () =>
      copyPasswordToClipboard(entry.password)
    );

    // Edit password button
    const editBtn = document.createElement("button");
    editBtn.innerHTML = '<img src="pen.svg" alt="edit icon" width="25" />';
    editBtn.addEventListener("click", () => openEditDialog(entry.id));

    // Append action buttons
    actionContainer.appendChild(checkbox);
    actionContainer.appendChild(linkBtn);
    actionContainer.appendChild(copyBtn);
    actionContainer.appendChild(editBtn);

    header.appendChild(detailsContainer);
    header.appendChild(actionContainer);

    // Extra fields section
    const extraFieldsContainer = document.createElement("div");
    extraFieldsContainer.classList.add("flex", "flex-col", "mt-2");

    const extraFieldsTitle = document.createElement("h3");
    extraFieldsTitle.classList.add("text-primary", "font-normal", "text-sm");
    extraFieldsTitle.textContent = "Extra fields";

    const extraFieldsList = document.createElement("div");
    extraFieldsList.classList.add("flex", "flex-col");

    if (typeof entry.extra_fields === "object" && entry.extra_fields !== null) {
      Object.entries(entry.extra_fields).forEach(([key, value]) => {
        if (value) {
          const fieldSpan = document.createElement("span");
          fieldSpan.classList.add("text-white/50", "font-normal", "text-sm");
          fieldSpan.textContent = `- ${key}: ${value}`;
          extraFieldsList.appendChild(fieldSpan);
        }
      });
    }

    extraFieldsContainer.appendChild(extraFieldsTitle);
    extraFieldsContainer.appendChild(extraFieldsList);

    // Tags section
    const tagsContainer = document.createElement("div");
    tagsContainer.classList.add("flex", "flex-col", "mt-2");

    const tagsTitle = document.createElement("h3");
    tagsTitle.classList.add("text-primary", "font-normal", "text-sm");
    tagsTitle.textContent = "Tags";

    const tagsList = document.createElement("div");
    tagsList.classList.add("flex", "gap-2", "mt-1");
    entry.tags.forEach((tag) => {
      const tagSpan = document.createElement("span");
      tagSpan.classList.add(
        "bg-green",
        "px-1",
        "py-0.5",
        "rounded-md",
        "text-white",
        "font-normal",
        "text-sm"
      );
      tagSpan.textContent = tag;
      tagsList.appendChild(tagSpan);
    });

    tagsContainer.appendChild(tagsTitle);
    tagsContainer.appendChild(tagsList);

    // Dates section
    const logContainer = document.createElement("div");
    logContainer.classList.add("flex", "flex-col", "mt-2");

    const logTitle = document.createElement("h3");
    logTitle.classList.add("text-primary", "font-normal", "text-sm");
    logTitle.textContent = "Password Log";

    const dateList = document.createElement("div");
    dateList.classList.add("flex", "flex-col", "mt-1");

    const createDate = document.createElement("div");
    createDate.classList.add("flex", "gap-2");
    createDate.innerHTML = `<h4 class="font-medium tracking-tight text-indigo-400">Creation date:</h4><span class="text-white/50 font-normal text-sm">${entry.creation_date}</span>`;

    const updateDate = document.createElement("div");
    updateDate.classList.add("flex", "gap-2");
    updateDate.innerHTML = `<h4 class="font-medium tracking-tight text-indigo-400">Update date:</h4><span class="text-white/50 font-normal text-sm">${entry.update_date}</span>`;

    const expirationDate = document.createElement("div");
    expirationDate.classList.add("flex", "gap-2");
    expirationDate.innerHTML = `<h4 class="font-medium tracking-tight text-indigo-400">Expiration date:</h4><span class="text-white/50 font-normal text-sm">${entry.expiration_date}</span>`;

    dateList.appendChild(createDate);
    dateList.appendChild(updateDate);
    dateList.appendChild(expirationDate);

    logContainer.appendChild(logTitle);
    logContainer.appendChild(dateList);

    // Final assembly of the container
    container.appendChild(header);
    container.appendChild(extraFieldsContainer);
    container.appendChild(tagsContainer);
    container.appendChild(logContainer);

    return container;
  }

  function copyPasswordToClipboard(password) {
    navigator.clipboard.writeText(password).then(
      () => alert("Password copied to clipboard!"),
      (err) => console.error("Could not copy password: ", err)
    );
    setTimeout(() => {
      navigator.clipboard.writeText("");
    }, 5000);
  }

  // Search functionality
  const searchField = document.getElementById("search-field");
  const searchInput = document.getElementById("search-input");

  // Event listener for real-time search
  searchInput.addEventListener("input", () => {
    const searchTerm = searchInput.value.trim().toLowerCase();
    const field = searchField.value;
    const filteredPasswords = filterPasswords(field, searchTerm);
    renderPasswords(filteredPasswords); // Update the interface with filtered results
  });

  // Function to filter passwords based on search criteria
  function filterPasswords(field, searchTerm) {
    return passwords.filter((entry) => {
      if (field === "extra_fields") {
        // Search in all subfields within extra_fields
        if (
          typeof entry.extra_fields === "object" &&
          entry.extra_fields !== null
        ) {
          return Object.values(entry.extra_fields).some((value) =>
            value.toLowerCase().includes(searchTerm)
          );
        }
        return false;
      } else {
        // Search in other fields
        return (
          entry[field] &&
          entry[field].toString().toLowerCase().includes(searchTerm)
        );
      }
    });
  }

  // Dialog: Load Passwords
  document.getElementById("open-dialog-btn").addEventListener("click", () => {
    document.getElementById("password-dialog").showModal();
  });

  document
    .getElementById("cancel-password-dialog-btn")
    .addEventListener("click", () => {
      document.getElementById("password-dialog").close();
    });

  document
    .getElementById("select-password-file")
    .addEventListener("click", async () => {
      try {
        [fileHandle] = await window.showOpenFilePicker({
          types: [
            {
              description: "Encrypted JSON",
              accept: { "application/json": [".json.enc"] },
            },
          ],
        });
        document.getElementById("selected-file-name").textContent =
          fileHandle.name;
        alert("File selected successfully.");
      } catch (error) {
        console.error("File selection failed:", error);
      }
    });

  document
    .getElementById("password-form")
    .addEventListener("submit", async (event) => {
      event.preventDefault();
      const masterPassword = document.getElementById("master-pass").value;

      if (!masterPassword || !fileHandle) {
        return alert("All fields are required, including selecting a file.");
      }

      try {
        const file = await fileHandle.getFile();
        const arrayBuffer = await file.arrayBuffer();

        // Store the file data and name in memory
        passwordFileData = arrayBuffer;
        passwordFileName = file.name;

        const formData = new FormData();
        formData.append("master_password", masterPassword);
        formData.append("file", new Blob([passwordFileData]));

        const response = await fetch("/api/loadPasswords", {
          method: "POST",
          body: formData,
        });

        if (!response.ok) {
          const errorData = await response.json();
          console.error("Error response data:", errorData);
          alert(`Error: ${errorData.error || "Unknown error"}`);
        } else {
          const result = await response.json();
          passwords = result.entries;
          renderPasswords(passwords);
          document.getElementById("password-dialog").close();
        }
      } catch (error) {
        console.error("Error loading passwords:", error);
        alert("Failed to load passwords.");
      }
    });

  // Dialog: Change Master Password
  document
    .getElementById("change-password-button")
    .addEventListener("click", () => {
      if (!fileHandle) {
        alert("Please load your passwords file first.");
        return;
      }
      document.getElementById("change-password-dialog").showModal();
    });

  document
    .getElementById("cancel-change-password-dialog-btn")
    .addEventListener("click", () => {
      document.getElementById("change-password-dialog").close();
    });

  document
    .getElementById("change-password-form")
    .addEventListener("submit", async (event) => {
      event.preventDefault();

      const oldPassword = document.getElementById("change-master-pass").value;
      const newPassword = document.getElementById(
        "change-new-master-pass"
      ).value;

      if (!oldPassword || !newPassword || !fileHandle) {
        return alert("All fields are required, including loading a file.");
      }

      try {
        const file = await fileHandle.getFile();

        const formData = new FormData();
        formData.append("old_password", oldPassword);
        formData.append("new_password", newPassword);
        formData.append("file", file);

        const response = await fetch("/api/changePassword", {
          method: "POST",
          body: formData,
        });

        if (!response.ok) {
          const error = await response.json();
          alert(`Error: ${error.message}`);
        } else {
          const newEncryptedData = await response.arrayBuffer();
          passwordFileData = newEncryptedData; // Update stored data

          await overwriteFile(newEncryptedData);
          alert("Password changed successfully!");
          document.getElementById("change-password-dialog").close();
        }
      } catch (error) {
        console.error("Error changing password:", error);
        alert("Failed to change password.");
      }
    });

  // Dialog: New Password
  document.getElementById("new-password-btn").addEventListener("click", () => {
    if (!fileHandle) {
      alert("Please load your passwords file first.");
      return;
    }
    document.getElementById("new-password-dialog").showModal();
  });

  document
    .getElementById("cancel-new-password-dialog-btn")
    .addEventListener("click", () => {
      document.getElementById("new-password-dialog").close();
    });

  document
    .getElementById("new-password-form")
    .addEventListener("submit", async (event) => {
      event.preventDefault();
      const formElement = event.target;
      const formData = new FormData(formElement);

      // Check if the password file has been loaded and stored in memory
      if (!passwordFileData || !fileHandle) {
        return alert("Please load your passwords file first.");
      }
      // Process extra fields and append them to FormData
      const extraFieldsInput = formData.get("extra-fields").toString();
      extraFieldsInput
        .split(",")
        .map((field) => field.trim())
        .forEach((field, index) => {
          formData.append(`extra_field_${index + 1}`, field);
        });

      // Process tags and append them to FormData
      const tagsInput = formData.get("tags").toString();
      tagsInput
        .split(",")
        .map((tag) => tag.trim())
        .forEach((tag) => {
          formData.append("tags[]", tag);
        });

      // Append the stored password file data
      formData.append(
        "edit-passfile",
        new Blob([passwordFileData]),
        passwordFileName
      );

      // Append the icon file if present
      const iconFile = document.getElementById("edit-icon-file").files[0];
      if (iconFile) formData.append("icon_file", iconFile);

      try {
        // Send the data to the server
        const response = await fetch("/api/addPassword", {
          method: "POST",
          body: formData,
        });

        if (!response.ok) {
          const error = await response.json();
          alert(`Error: ${error.message}`);
        } else {
          // Update password file data in memory with the new file content
          const updatedFileData = await response.arrayBuffer();
          passwordFileData = updatedFileData; // Update stored data

          // Overwrite the file directly using the File System Access API
          await overwriteFile(updatedFileData);

          alert("Password added successfully and file updated!");
          formElement.reset();
          document.getElementById("new-password-dialog").close();

          // Re-render the updated passwords
          // Assuming the server returns the updated entries
          const updatedEntries = await response.json();
          passwords = updatedEntries.entries;
          renderPasswords(passwords);
        }
      } catch (error) {
        console.error("Error adding password:", error);
        alert("Failed to add password.");
      }
    });

  // Dialog: Create New File
  document
    .getElementById("create-new-file-btn")
    .addEventListener("click", () => {
      document.getElementById("create-new-file-dialog").showModal();
    });

  document
    .getElementById("cancel-create-new-file-dialog-btn")
    .addEventListener("click", () => {
      document.getElementById("create-new-file-dialog").close();
    });

  document
    .getElementById("create-new-file-form")
    .addEventListener("submit", async (event) => {
      event.preventDefault();
      const formData = new FormData(event.target);

      const masterPassword = formData.get("master_password");
      if (!masterPassword) {
        return alert("Please enter a master password.");
      }

      try {
        // Enviar solicitud al servidor para crear un nuevo archivo encriptado
        const response = await fetch("/api/createNewFile", {
          method: "POST",
          body: formData,
        });

        if (!response.ok) {
          const errorData = await response.json();
          console.error("Error response data:", errorData);
          alert(`Error: ${errorData.message || "Unknown error"}`);
        } else {
          // Recibir el archivo encriptado como Blob
          const blob = await response.blob();

          // Solicitar al usuario guardar el archivo encriptado
          const options = {
            suggestedName: "encrypted_passwords.json.enc",
            types: [
              {
                description: "Encrypted JSON",
                accept: { "application/json": [".json.enc"] },
              },
            ],
          };

          try {
            const saveFileHandle = await window.showSaveFilePicker(options);
            const writableStream = await saveFileHandle.createWritable();
            await writableStream.write(blob);
            await writableStream.close();

            // Actualizar las variables globales con el nuevo archivo
            fileHandle = saveFileHandle;
            passwordFileData = await blob.arrayBuffer();
            passwordFileName = "encrypted_passwords.json.enc";
            passwords = []; // Inicialmente vacío
            renderPasswords(passwords);

            alert("File created successfully!");
            document.getElementById("create-new-file-dialog").close();
          } catch (saveError) {
            console.error("Error saving encrypted file:", saveError);
            alert("Failed to save the encrypted file.");
          }
        }
      } catch (error) {
        console.error("Error creating new file:", error);
        alert("Failed to create file.");
      }
    });

  // Dialog: Import Plain Password File
  document.getElementById("import-plain-btn").addEventListener("click", () => {
    document.getElementById("import-plain-dialog").showModal();
  });

  document
    .getElementById("cancel-import-plain-dialog-btn")
    .addEventListener("click", () => {
      document.getElementById("import-plain-dialog").close();
    });

  // Seleccionar archivo para importar en "Import Plain Password File"
  document
    .getElementById("select-import-plain-file")
    .addEventListener("click", async () => {
      try {
        const [plainFileHandle] = await window.showOpenFilePicker({
          types: [
            {
              description: "Plain JSON",
              accept: { "application/json": [".json"] },
            },
          ],
        });
        const file = await plainFileHandle.getFile();
        document.getElementById("selected-import-plain-file-name").textContent =
          file.name;
        window.plainFile = file;
      } catch (error) {
        console.error("File selection failed:", error);
      }
    });

  // Event listener for the form submission
  document
    .getElementById("import-plain-form")
    .addEventListener("submit", async (event) => {
      event.preventDefault();

      const masterPassword = document.getElementById(
        "plain-import-master-pass"
      ).value;
      if (!masterPassword || !window.plainFile) {
        return alert("Please enter a master password and select a file.");
      }

      try {
        // Create FormData to send the file and the password
        const formData = new FormData();
        formData.append("master_password", masterPassword);
        formData.append("file", window.plainFile);

        // Send request to the server to process the file
        const response = await fetch("/api/importPlain", {
          method: "POST",
          body: formData,
        });

        if (!response.ok) {
          const errorData = await response.json();
          console.error("Error response data:", errorData);
          alert(`Error: ${errorData.message || "Unknown error"}`);
        } else {
          // Receive the encrypted file as Blob
          const blob = await response.blob();

          // Prompt the user to save the encrypted file
          const options = {
            suggestedName: "encrypted_passwords.json.enc",
            types: [
              {
                description: "Encrypted JSON",
                accept: { "application/json": [".json.enc"] },
              },
            ],
          };

          try {
            const saveFileHandle = await window.showSaveFilePicker(options);
            const writableStream = await saveFileHandle.createWritable();
            await writableStream.write(blob);
            await writableStream.close();

            // Update the global variables with the new file
            fileHandle = saveFileHandle;
            passwordFileData = await blob.arrayBuffer();
            passwordFileName = "encrypted_passwords.json.enc";

            // Load the passwords
            const formDataLoad = new FormData();
            formDataLoad.append("master_password", masterPassword);
            formDataLoad.append(
              "file",
              new Blob([passwordFileData]),
              passwordFileName
            );

            const loadResponse = await fetch("/api/loadPasswords", {
              method: "POST",
              body: formDataLoad,
            });

            if (loadResponse.ok) {
              const result = await loadResponse.json();
              passwords = result.entries;
              renderPasswords(passwords);
            } else {
              console.error("Error loading passwords after import.");
            }

            alert("Plain file encrypted, imported, and saved successfully.");
            document.getElementById("import-plain-dialog").close();
          } catch (saveError) {
            console.error("Error saving encrypted file:", saveError);
            alert("Failed to save the encrypted file.");
          }
        }
      } catch (error) {
        console.error("Error importing plain file:", error);
        alert("Failed to import and encrypt plain file.");
      }
    });

  // Descargar archivo en formato plain para "Export Plain"
  document
    .getElementById("export-plain-btn")
    .addEventListener("click", async () => {
      if (!passwords.length) {
        return alert("No passwords to export.");
      }

      // Envolver el arreglo de contraseñas en un objeto con la propiedad "entries"
      const dataToExport = { entries: passwords };

      const blob = new Blob([JSON.stringify(dataToExport, null, 2)], {
        type: "application/json",
      });
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement("a");
      a.href = url;
      a.download = "passwords_plain.json";
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      window.URL.revokeObjectURL(url);
    });

  // Dialog: Decrypt File
  document.getElementById("decrypt-file-btn").addEventListener("click", () => {
    if (!fileHandle) {
      alert("Please load your passwords file first.");
      return;
    }
    document.getElementById("decrypt-dialog").showModal();
  });

  document
    .getElementById("decrypt-cancel-dialog-btn")
    .addEventListener("click", () => {
      document.getElementById("decrypt-dialog").close();
    });

  document
    .getElementById("decrypt-form")
    .addEventListener("submit", async (event) => {
      event.preventDefault();

      const masterPassword = document.getElementById("descrypt-password").value;

      if (!masterPassword || !fileHandle) {
        return alert("All fields are required, including selecting a file.");
      }

      try {
        const file = await fileHandle.getFile();
        const arrayBuffer = await file.arrayBuffer();
        const encryptedData = new Blob([arrayBuffer]);

        const formData = new FormData();
        formData.append("master_password", masterPassword);
        formData.append("file", encryptedData, file.name);

        const response = await fetch("/api/decryptFile", {
          method: "POST",
          body: formData,
        });

        if (!response.ok) {
          const errorData = await response.json();
          console.error("Error response data:", errorData);
          alert(`Error: ${errorData.message || "Unknown error"}`);
        } else {
          // Recibir el archivo desencriptado como Blob
          const decryptedBlob = await response.blob();

          // Crear un enlace para descargar el archivo desencriptado
          const url = window.URL.createObjectURL(decryptedBlob);
          const a = document.createElement("a");
          a.href = url;
          a.download = file.name.replace(/\.enc$/, ".dec"); // Cambio de extensión a .dec
          document.body.appendChild(a);
          a.click();
          document.body.removeChild(a);
          window.URL.revokeObjectURL(url);

          alert("File decrypted and downloaded successfully!");
          document.getElementById("decrypt-dialog").close();
        }
      } catch (error) {
        console.error("Error decrypting file:", error);
        alert("Failed to decrypt the file.");
      }
    });

  function openEditDialog(entryId) {
    // Encontrar la entrada correspondiente
    const entry = passwords.find((item) => item.id === entryId);
    if (!entry) {
      alert("Password entry not found.");
      return;
    }

    // Prellenar los campos del formulario
    document.getElementById("edit-entry-id").value = entry.id;
    document.getElementById("edit-site-name").value = entry.site_name;
    document.getElementById("edit-username").value = entry.username;
    document.getElementById("edit-url").value = entry.url;
    document.getElementById("edit-notes").value = entry.notes;
    document.getElementById("edit-tags").value = entry.tags.join(", ");
    document.getElementById("edit-extra-fields").value = Object.values(
      entry.extra_fields
    )
      .filter((value) => value !== "")
      .join(", ");

    // Prellenar la fecha de expiración
    const expirationDateInput = document.getElementById("edit-expiration-date");
    const today = new Date().toISOString().split("T")[0];
    expirationDateInput.setAttribute("min", today); // Establecer fecha mínima a hoy

    if (entry.expiration_date) {
      const expirationDate = new Date(entry.expiration_date);
      const isoDateString = expirationDate.toISOString().split("T")[0];
      expirationDateInput.value = isoDateString;
    } else {
      expirationDateInput.value = "";
    }

    // Mostrar el diálogo
    document.getElementById("edit-password-dialog").showModal();
  }

  document
    .getElementById("cancel-edit-password-dialog-btn")
    .addEventListener("click", () => {
      document.getElementById("edit-password-dialog").close();
    });

  document
    .getElementById("edit-password-form")
    .addEventListener("submit", async (event) => {
      event.preventDefault();

      // Obtener la fecha de expiración ingresada
      const expirationDateInput = document.getElementById(
        "edit-expiration-date"
      ).value;
      const selectedDate = new Date(expirationDateInput);
      const today = new Date();
      today.setHours(0, 0, 0, 0); // Establecer hora a medianoche para comparación

      if (selectedDate < today) {
        alert("The expiration date cannot be earlier than today.");
        return;
      }

      // Continuar con el procesamiento del formulario...
      const formElement = event.target;
      const formData = new FormData(formElement);

      // Agregar el archivo encriptado actual
      formData.append(
        "edit-passfile",
        new Blob([passwordFileData]),
        passwordFileName
      );

      // Adjuntar el icono si se proporcionó
      const iconFile = document.getElementById("edit-existing-icon-file")
        .files[0];
      if (iconFile) {
        formData.append("icon_file", iconFile);
      }

      try {
        const response = await fetch("/api/editPassword", {
          method: "POST",
          body: formData,
        });

        if (!response.ok) {
          const error = await response.json();
          alert(`Error: ${error.message}`);
        } else {
          // Actualizar passwordFileData con el nuevo contenido
          const updatedFileData = await response.arrayBuffer();
          passwordFileData = updatedFileData; // Actualizar los datos en memoria

          // Sobrescribir el archivo
          await overwriteFile(updatedFileData);

          alert("Password updated successfully!");

          // Cerrar el diálogo
          document.getElementById("edit-password-dialog").close();

          // Recargar las contraseñas
          const masterPassword = formData.get("master_password");
          const formDataLoad = new FormData();
          formDataLoad.append("master_password", masterPassword);
          formDataLoad.append(
            "file",
            new Blob([passwordFileData]),
            passwordFileName
          );

          const loadResponse = await fetch("/api/loadPasswords", {
            method: "POST",
            body: formDataLoad,
          });

          if (loadResponse.ok) {
            const result = await loadResponse.json();
            passwords = result.entries;
            renderPasswords(passwords);
          } else {
            console.error("Error loading updated passwords.");
          }
        }
      } catch (error) {
        console.error("Error updating password:", error);
        alert("Failed to update password.");
      }
    });

  document
    .getElementById("decrypt-selected-btn")
    .addEventListener("click", async () => {
      const selectedCheckboxes = document.querySelectorAll(
        ".entry-checkbox:checked"
      );
      const selectedEntries = Array.from(selectedCheckboxes).map(
        (checkbox) => checkbox.value
      );

      if (selectedEntries.length === 0) {
        alert("No entries selected for decryption.");
        return;
      }

      const masterPassword = prompt(
        "Enter your master password for decryption:"
      );
      if (!masterPassword) {
        alert("Master password is required.");
        return;
      }

      // Creating a formData to send the encrypted file and selected entries
      const formData = new FormData();
      formData.append("file", new Blob([passwordFileData]), passwordFileName);
      formData.append("master_password", masterPassword);
      formData.append("selected_entries", JSON.stringify(selectedEntries));

      try {
        const response = await fetch("/api/selectedDecrypt", {
          method: "POST",
          body: formData,
        });

        if (!response.ok) {
          const errorData = await response.json();
          alert(`Error: ${errorData.message}`);
        } else {
          const blob = await response.blob();
          const url = window.URL.createObjectURL(blob);
          const a = document.createElement("a");
          a.href = url;
          a.download = "decrypted_entries.dec.json";
          document.body.appendChild(a);
          a.click();
          document.body.removeChild(a);
          window.URL.revokeObjectURL(url);
          alert("Selected entries decrypted and downloaded successfully.");
        }
      } catch (error) {
        console.error("Error decrypting selected entries:", error);
        alert("Failed to decrypt selected entries.");
      }
    });
</script>
